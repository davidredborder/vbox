#!/usr/bin/env bash
#        _
# __   _| |__   _____  __
# \ \ / / '_ \ / _ \ \/ /
#  \ V /| |_) | (_) >  <
#   \_/ |_.__/ \___/_/\_\
#
# A streamlined interface for VBoxManage, the VirtualBox command line tool.
#
# https://github.com/xwmx/vbox
#
# Depends on:
#  VBoxManage, part of VirtualBox
#
# Bash Boilerplate: https://github.com/xwmx/bash-boilerplate
#
# Copyright (c) 2016 William Melody • hi@williammelody.com

###############################################################################
# Strict Mode
###############################################################################

set -o nounset
set -o errexit
set -o pipefail
set -o noglob
IFS=$'\n\t'

###############################################################################
# Globals
###############################################################################

# $_VERSION
#
# Manually set this to to current version of the program. Adhere to the
# semantic versioning specification: http://semver.org
_VERSION="1.2.2"

# $DEFAULT_COMMAND
#
# The command to be run by default, when no command name is specified. If the
# environment has an existing $DEFAULT_COMMAND set, then that value is used.
DEFAULT_COMMAND="${DEFAULT_COMMAND:-help}"

###############################################################################
# Debug
###############################################################################

# _debug()
#
# Usage:
#   _debug printf "Debug info. Variable: %s\\n" "$0"
#
# A simple function for executing a specified command if the `$_USE_DEBUG`
# variable has been set. The command is expected to print a message and
# should typically be either `echo`, `printf`, or `cat`.
__DEBUG_COUNTER=0
_debug() {
  if [[ "${_USE_DEBUG:-"0"}" -eq 1 ]]
  then
    __DEBUG_COUNTER=$((__DEBUG_COUNTER+1))
    # Prefix debug message with "bug (U+1F41B)"
    printf "🐛  %s " "${__DEBUG_COUNTER}"
    "${@}"
    printf "―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\\n"
  fi
}
# debug()
#
# Usage:
#   debug "Debug info. Variable: $0"
#
# Print the specified message if the `$_USE_DEBUG` variable has been set.
#
# This is a shortcut for the _debug() function that simply echos the message.
debug() {
  _debug echo "${@}"
}

###############################################################################
# Die
###############################################################################

# _die()
#
# Usage:
#   _die printf "Error message. Variable: %s\\n" "$0"
#
# A simple function for exiting with an error after executing the specified
# command. The command is expected to print a message and should typically
# be either `echo`, `printf`, or `cat`.
_die() {
  # Prefix die message with "cross mark (U+274C)", often displayed as a red x.
  printf "❌  "
  "${@}" 1>&2
  exit 1
}
# die()
#
# Usage:
#   die "Error message. Variable: $0"
#
# Exit with an error and print the specified message.
#
# This is a shortcut for the _die() function that simply echos the message.
die() {
  _die echo "${@}"
}

###############################################################################
# Options
#
# NOTE: The `getops` builtin command only parses short options and BSD `getopt`
# does not support long arguments (GNU `getopt` does), so the most portable
# and clear way to parse options is often to just use a `while` loop.
#
# For a pure bash `getopt` function, try pure-getopt:
#   https://github.com/agriffis/pure-getopt
#
# More info:
#   http://wiki.bash-hackers.org/scripting/posparams
#   http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
#   http://stackoverflow.com/a/14203146
#   http://stackoverflow.com/a/7948533
#   https://stackoverflow.com/a/12026302
#   https://stackoverflow.com/a/402410
###############################################################################

# Get raw options for any commands that expect them.
_RAW_OPTIONS="${*:-}"

# Parse Options ###############################################################

# Initialize $_COMMAND_ARGV array
#
# This array contains all of the arguments that get passed along to each
# command. This is essentially the same as the program arguments, minus those
# that have been filtered out in the program option parsing loop. This array
# is initialized with $0, which is the program's name.
_COMMAND_ARGV=("${0}")
# Initialize $_CMD and `$_USE_DEBUG`, which can continue to be blank depending
# on what the program needs.
_CMD=""
_USE_DEBUG=0

while [[ ${#} -gt 0 ]]
do
  __opt="${1}"
  shift
  case "${__opt}" in
    -h|--help)
      _CMD="help"
      ;;
    --version)
      _CMD="version"
      ;;
    --debug)
      _USE_DEBUG=1
      ;;
    *)
      # The first non-option argument is assumed to be the command name.
      # All subsequent arguments are added to $_COMMAND_ARGV.
      if [[ -n "${_CMD}" ]]
      then
        _COMMAND_ARGV+=("${__opt}")
      else
        _CMD="${__opt}"
      fi
      ;;
  esac
done

# Set $_COMMAND_PARAMETERS to $_COMMAND_ARGV, minus the initial element, $0. This
# provides an array that is equivalent to $* and $@ within each command
# function, though the array is zero-indexed, which could lead to confusion.
#
# Use `unset` to remove the first element rather than slicing (e.g.,
# `_COMMAND_PARAMETERS=("${_COMMAND_ARGV[@]:1}")`) because under bash 3.2 the
# resulting slice is treated as a quoted string and doesn't easily get coaxed
# into a new array.
_COMMAND_PARAMETERS=(${_COMMAND_ARGV[*]})
unset "_COMMAND_PARAMETERS[0]"

_debug printf "\${_CMD}: %s\\n" "${_CMD}"
_debug printf "\${_RAW_OPTIONS} (one per line):\\n%s\\n" "${_RAW_OPTIONS}"
_debug printf "\${_COMMAND_ARGV[*]}: %s\\n" "${_COMMAND_ARGV[*]}"
_debug printf \
  "\${_COMMAND_PARAMETERS[*]:-}: %s\\n" \
  "${_COMMAND_PARAMETERS[*]:-}"

###############################################################################
# Environment
###############################################################################

# $_ME
#
# Set to the program's basename.
_ME=$(basename "${0}")

_debug printf "\${_ME}: %s\\n" "${_ME}"

###############################################################################
# Load Commands
###############################################################################

# Initialize $_DEFINED_COMMANDS array.
_DEFINED_COMMANDS=()

# _load_commands()
#
# Usage:
#   _load_commands
#
# Loads all of the commands sourced in the environment.
_load_commands() {

  _debug printf "_load_commands(): entering...\\n"
  _debug printf "_load_commands() declare -F:\\n%s\\n" "$(declare -F)"

  # declare is a bash built-in shell function that, when called with the '-F'
  # option, displays all of the functions with the format
  # `declare -f function_name`. These are then assigned as elements in the
  # $function_list array.
  local _function_list
  _function_list=($(declare -F))

  _debug printf \
    "_load_commands() \${_function_list[@]}: %s\\n" \
    "${_function_list[@]}"

  for __name in "${_function_list[@]}"
  do
    _debug printf \
      "_load_commands() \${__name}: %s\\n" \
      "${__name}"
    # Each element has the format `declare -f function_name`, so set the name
    # to only the 'function_name' part of the string.
    local _function_name
    _function_name=$(printf "%s" "${__name}" | awk '{ print $3 }')

    _debug printf \
      "_load_commands() \${_function_name}: %s\\n" \
      "${_function_name}"

    # Add the function name to the $_DEFINED_COMMANDS array unless it starts
    # with an underscore or is one of the desc(), debug(), or die() functions,
    # since these are treated as having 'private' visibility.
    if ! { [[ "${_function_name}" =~ ^_(.*)  ]] || \
           [[ "${_function_name}" == "desc"  ]] || \
           [[ "${_function_name}" == "debug" ]] || \
           [[ "${_function_name}" == "die"   ]]
    }
    then
      _DEFINED_COMMANDS+=("${_function_name}")
    fi
  done

  _debug printf \
    "commands() \${_DEFINED_COMMANDS[*]:-}:\\n%s\\n" \
    "${_DEFINED_COMMANDS[*]:-}"
}

###############################################################################
# Main
###############################################################################

# _main()
#
# Usage:
#   _main
#
# The primary function for starting the program.
#
# NOTE: must be called at end of program after all commands have been defined.
_main() {
  _debug printf "main(): entering...\\n"
  _debug printf "main() \${_CMD} (upon entering): %s\\n" "${_CMD}"

  # If $_CMD is blank, then set to `$DEFAULT_COMMAND`
  if [[ -z "${_CMD}" ]]
  then
    _CMD="${DEFAULT_COMMAND}"
  fi

  # Load all of the commands.
  _load_commands

  # If the command is defined, run it, otherwise return an error.
  if _contains "${_CMD}" "${_DEFINED_COMMANDS[*]:-}"
  then
    # Pass all comment arguments to the program except for the first ($0).
    ${_CMD} "${_COMMAND_PARAMETERS[@]:-}"
  else
    _die printf "Unknown command: %s\\n" "${_CMD}"
  fi
}

###############################################################################
# Utility Functions
###############################################################################

# _function_exists()
#
# Usage:
#   _function_exists "possible_function_name"
#
# Returns:
#   0  If a function with the given name is defined in the current environment.
#   1  If not.
#
# Other implementations, some with better performance:
# http://stackoverflow.com/q/85880
_function_exists() {
  [ "$(type -t "${1}")" == 'function' ]
}

# _command_exists()
#
# Usage:
#   _command_exists "possible_command_name"
#
# Returns:
#   0  If a command with the given name is defined in the current environment.
#   1  If not.
#
# Information on why `hash` is used here:
# http://stackoverflow.com/a/677212
_command_exists() {
  hash "${1}" 2>/dev/null
}

# _contains()
#
# Usage:
#   _contains "$item" "${list[*]}"
#
# Returns:
#   0  If the item is included in the list.
#   1  If not.
_contains() {
  local _test_list=(${*:2})
  for __test_element in "${_test_list[@]:-}"
  do
    _debug printf "_contains() \${__test_element}: %s\\n" "${__test_element}"
    if [[ "${__test_element}" == "${1}" ]]
    then
      _debug printf "_contains() match: %s\\n" "${1}"
      return 0
    fi
  done
  return 1
}

# _join()
#
# Usage:
#   _join <separator> <array>
#
# Examples:
#   _join , a "b c" d     => a,b c,d
#   _join / var local tmp => var/local/tmp
#   _join , "${FOO[@]}"   => a,b,c
#
# More Information:
#   http://stackoverflow.com/a/17841619
_join() {
  local IFS="${1}"
  shift
  printf "%s\\n" "${*}"
}

# _command_argv_includes()
#
# Usage:
#   _command_argv_includes "an_argument"
#
# Returns:
#   0  If the argument is included in `$_COMMAND_ARGV`, the program's command
#      argument list.
#   1  If not.
#
# This is a shortcut for simple cases where a command wants to check for the
# presence of options quickly without parsing the options again.
_command_argv_includes() {
  _contains "${1}" "${_COMMAND_ARGV[*]}"
}

# _blank()
#
# Usage:
#   _blank "$an_argument"
#
# Returns:
#   0  If the argument is not present or null.
#   1  If the argument is present and not null.
_blank() {
  [[ -z "${1:-}" ]]
}

# _present()
#
# Usage:
#   _present "$an_argument"
#
# Returns:
#   0  If the argument is present and not null.
#   1  If the argument is not present or null.
_present() {
  [[ -n "${1:-}" ]]
}

# _interactive_input()
#
# Usage:
#   _interactive_input
#
# Returns:
#   0  If the current input is interactive (eg, a shell).
#   1  If the current input is stdin / piped input.
_interactive_input() {
  [[ -t 0 ]]
}

# _piped_input()
#
# Usage:
#   _piped_input
#
# Returns:
#   0  If the current input is stdin / piped input.
#   1  If the current input is interactive (eg, a shell).
_piped_input() {
  ! _interactive_input
}

# _emojify_status()
#
# Usage:
#   _emojify_status <string>
#   echo <string> | _emojify_status
#
# Description:
#   Add emoji to status messages.
_emojify_status() {
  local _status_string="${1:-}"

  if [[ -n "${_status_string}" ]]
  then
    _status_string="${_status_string//aborted/❕ aborted}"
    _status_string="${_status_string//paused/⏸ paused}"
    _status_string="${_status_string//powered/⚫️ powered}"
    _status_string="${_status_string//running/✅ running}"
    _status_string="${_status_string//saved/💾 saved}"

    printf "%s\\n" "${_status_string}"
  else
    _die printf "Usage: _emojify_status <string>\\n"
  fi
}

###############################################################################
# desc
###############################################################################

# desc()
#
# Usage:
#   desc <name> <description>
#   desc --get <name>
#
# Options:
#   --get  Print the description for <name> if one has been set.
#
# Examples:
# ```
#   desc "list" <<HEREDOC
# Usage:
#   ${_ME} list
#
# Description:
#   List items.
# HEREDOC
#
# desc --get "list"
# ```
#
# Set or print a description for a specified command or function <name>. The
# <description> text can be passed as the second argument or as standard input.
#
# To make the <description> text available to other functions, `desc()` assigns
# the text to a variable with the format `$___desc_<name>`.
#
# When the `--get` option is used, the description for <name> is printed, if
# one has been set.
#
# NOTE:
#
# The `read` form of assignment is used for a balance of ease of
# implementation and simplicity. There is an alternative assignment form
# that could be used here:
#
# var="$(cat <<'HEREDOC'
# some message
# HEREDOC
# )
#
# However, this form appears to require trailing space after backslases to
# preserve newlines, which is unexpected. Using `read` simply requires
# escaping backslashes, which is more common.
desc() {
  _debug printf "desc() \${*}: %s\\n" "$@"
  [[ -z "${1:-}" ]] && _die printf "desc(): No command name specified.\\n"

  if [[ "${1}" == "--get" ]]
  then # get ------------------------------------------------------------------
    [[ -z "${2:-}" ]] && _die printf "desc(): No command name specified.\\n"

    local _name="${2:-}"
    local _desc_var="___desc_${_name}"

    if [[ -n "${!_desc_var:-}" ]]
    then
      printf "%s\\n" "${!_desc_var}"
    else
      printf "No additional information for \`%s\`\\n" "${_name}"
    fi
  else # set ------------------------------------------------------------------
    if [[ -n "${2:-}" ]]
    then # argument is present
      read -r -d '' "___desc_${1}" <<HEREDOC
${2}
HEREDOC

      _debug printf "desc() set with argument: \${___desc_%s}\\n" "${1}"
    else # no argument is present, so assume piped input
      # `read` exits with non-zero status when a delimeter is not found, so
      # avoid errors by ending statement with `|| true`.
      read -r -d '' "___desc_${1}" || true

      _debug printf "desc() set with pipe: \${___desc_%s}\\n" "${1}"
    fi
  fi
}

###############################################################################
# Default Commands
###############################################################################

# Version #####################################################################

desc "version" <<HEREDOC
Usage:
  ${_ME} (version | --version)

Description:
  Display the current program version.

  To save you the trouble, the current version is ${_VERSION}
HEREDOC
version() {
  printf "%s\\n" "${_VERSION}"
}

# Help ########################################################################

desc "help" <<HEREDOC
Usage:
  ${_ME} help [<command>]

Description:
  Display help information for ${_ME} or a specified command.
HEREDOC
help() {
  if [[ "${1:-}" ]]
  then
    desc --get "${1}"
  else
    cat <<HEREDOC
       _
__   _| |__   _____  __
\ \ / / '_ \ / _ \ \/ /
 \ V /| |_) | (_) >  <
  \_/ |_.__/ \___/_/\_\\

A streamlined interface for VBoxManage, the VirtualBox command line tool.

Version: ${_VERSION}

Usage:
  ${_ME} commands [--raw]
  ${_ME} config [--path]
  ${_ME} forwarding add <vm-name> <rule-name> <port>
  ${_ME} forwarding list <vm-name>
  ${_ME} forwarding delete <vm-name> <rule-name>
  ${_ME} (help [<command>] | -h | --help)
  ${_ME} kill   (<name> | <uuid>)
  ${_ME} list   [running | status]
  ${_ME} manage [<general option>] <command>
  ${_ME} pause  (<name> | <uuid>)
  ${_ME} reset  (<name> | <uuid>)
  ${_ME} resume (<name> | <uuid>)
  ${_ME} show   (<name> | <uuid>)
  ${_ME} start  (<name> | <uuid>) [--headless]
  ${_ME} status [(<name> | <uuid>) [--long|-l]]
  ${_ME} stop   (<name> | <uuid>)
  ${_ME} snapshot  (<name> | <uuid>)
  ${_ME} snapshot  (<name> | <uuid>) take <snapshot>
  ${_ME} snapshot  (<name> | <uuid>) delete <snapshot>
  ${_ME} snapshot  (<name> | <uuid>) restore <snapshot>
  ${_ME} (version | --version)

Global Options:
  -h --help  Display this help information.
  --version  Display version information.

Help:
  ${_ME} help [<command>]

Home:
  https://github.com/xwmx/vbox

$(commands)
HEREDOC
  fi
}

# Command List ################################################################


desc "commands" <<HEREDOC
Usage:
  ${_ME} commands [--raw]

Options:
  --raw  Display the command list without formatting.

Description:
  Display the list of available commands.
HEREDOC
commands() {
  if _command_argv_includes "--raw"
  then
    printf "%s\\n" "${_DEFINED_COMMANDS[@]}"
  else
    printf "Available commands:\\n"
    printf "  %s\\n" "${_DEFINED_COMMANDS[@]}"
  fi
}

###############################################################################
# Commands
# ========.....................................................................
#
# Example command group structure:
#
# desc example ""   - Optional. A short description for the command.
# example() { : }   - The command called by the user.
#
#
# desc example <<HEREDOC
#   Usage:
#     $_ME example
#
#   Description:
#     Print "Hello, World!"
#
#     For usage formatting conventions see:
#     - http://docopt.org/
#     - http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html
# HEREDOC
# example() {
#   printf "Hello, World!\\n"
# }
#
###############################################################################

# ----------------------------------------------------------------------- config

desc "config" <<HEREDOC
Usage:
  ${_ME} config [--path]

Options:
  --path  Print the path to the configuration file, 'VirtualBox.xml'.

Description:
  When no argument has been passed, open the 'VirtualBox.xml' configuration
  file in \`\$EDITOR\`, which is currently set to '${EDITOR}'. When the
  \`--path\` option is specified, the path to 'VirtualBox.xml' is printed.
HEREDOC
config() {
  local _config_path

  if [[ "${OSTYPE}" =~ ^darwin ]]
  then
    _config_path="${HOME}/Library/VirtualBox/VirtualBox.xml"
  else
    _config_path="${HOME}/.VirtualBox/VirtualBox.xml"
  fi

  if _command_argv_includes "--path"
  then
    printf "%s\\n" "${_config_path}"
  else
    "${EDITOR}" "${_config_path}"
  fi
}

# ------------------------------------------------------------------ forwarding

desc "forwarding" <<HEREDOC
Usage:
  ${_ME} forwarding add <vm-name> <rule-name> <port>
  ${_ME} forwarding list <vm-name>
  ${_ME} forwarding delete <vm-name> <rule-name>

Subcommands:
  add     Add a new port forwarding rule.
  list    List forwarding rules.
  delete  Delete the specified rule.

Description:
  Manage port forwarding.

Example:
  ${_ME} forwarding add "ubuntu-vm" "tcp5000" "5000"

  Equivalent of:
    VBoxManage controlvm ubuntu-vm \\\\
      natpf1 "tcp5000,tcp,127.0.0.1,5000,,5000"
HEREDOC
# VBoxManage controlvm fields:
#
# [--natpf<1-N> [<rulename>],tcp|udp,[<hostip>],
#               <hostport>,[<guestip>],<guestport>]
forwarding() {
  local _subcommand=
  local _arguments=()

  for arg in "${_COMMAND_ARGV[@]:-}"
  do
    case "${arg}" in
      add|list|delete)
        if [[ -z "${_subcommand}" ]]
        then
          _subcommand="${arg}"
        else
          _arguments+=("${arg}")
        fi
        ;;
      *)
        _arguments+=("${arg}")
        ;;
    esac
  done

  _debug printf "forwarding() \${_subcommand}: %s\\n" "${_subcommand:-}"
  if [[ -z "${_subcommand}" ]]
  then
    ${_ME} help forwarding
    exit 1
  fi

  _vm="${_arguments[1]:-}"
  _debug printf "forwarding() \${_vm}: %s\\n" "${_vm}"
  if [[ -z "${_vm}" ]]
  then
    _die printf "VM name missing.\\n"
  fi

  case "${_subcommand}" in
    add)
      local _name="${_arguments[2]:-}"
      local _port="${_arguments[3]:-}"

      _debug printf \
        "forwarding() \${_arguments[2]:-}: %s\\n" \
        "${_arguments[2]:-}"
      _debug printf \
        "forwarding() \${_arguments[3]:-}: %s\\n" \
        "${_arguments[3]:-}"

      if [[ -z "${_name}" ]]
      then
        _die printf "Rule name missing.\\n"
      fi
      if [[ -z "${_port}" ]]
      then
        _die printf "Port missing.\\n"
      fi

      VBoxManage controlvm "${_vm}" \
        natpf1 "${_name},tcp,127.0.0.1,${_port},,${_port}"
      ;;
    list)
      VBoxManage showvminfo "${_vm}" | awk '/NIC/ && /Rule/ {print}'
      ;;
    delete)
      local _name="${_arguments[2]:-}"
      if [[ -z "${_name}" ]]
      then
        _die printf "Rule name missing.\\n"
      fi
      VBoxManage modifyvm "${_vm}" --natpf1 delete "${_name}"
      ;;
  esac
}

# ------------------------------------------------------------------------ kill

desc "kill" <<HEREDOC
Usage:
  ${_ME} kill (<name> | <uuid>)

Description:
  Command: \`VBoxManage controlvm <vm> poweroff\`

  Has the same effect on a virtual machine as pulling the power cable on a real
  computer. The state of the VM is not saved beforehand, and data may be lost.
  (This is equivalent to selecting the "Close" item in the "Machine" menu of
  the GUI or pressing the window's close button, and then selecting "Power off
  the machine" in the dialog.)
HEREDOC
kill() {
  local id="${1:-}"
  if [[ -z "${id}" ]]
  then
    _die printf "Name or UUID not provided.\\n"
  fi
  VBoxManage controlvm "${id}" poweroff
}

# ------------------------------------------------------------------------ list

desc "list" <<HEREDOC
Usage:
  ${_ME} list [running | status]

Arguments:
  running  List all running VMs.
  status   Display all VMs with basic status information.

Description:
  List VirtualBox VMs.
HEREDOC
list() {
  if _contains "running" "${_COMMAND_PARAMETERS[@]:-}"
  then
    VBoxManage list runningvms
  elif _contains "status" "${_COMMAND_PARAMETERS[@]:-}"
  then
    local _vm_status_list
    _vm_status_list="$(
      VBoxManage list vms -l \
        | awk '/^Name:[ ]{5,}|^State:[ ]{5,}/ {print}' \
        | sed s/\ \ //g \
        | cut -d: -f2-
    )"
    _emojify_status "${_vm_status_list}"
  else
    VBoxManage list vms
  fi
}

# ---------------------------------------------------------------------- manage

desc "manage" <<HEREDOC
Usage:
  ${_ME} manage [<general option>] <command>

Description:
  Alias for \`VBoxManage\`.

  VBoxManage Documentation:
    https://www.virtualbox.org/manual/ch08.html
HEREDOC
manage() {
  if [[ -z "${_COMMAND_PARAMETERS[*]:-}" ]]
  then
    VBoxManage
  else
    VBoxManage "${_COMMAND_PARAMETERS[@]:-}"
  fi
}

# ----------------------------------------------------------------------- pause

desc "pause" <<HEREDOC
Usage:
  ${_ME} pause (<name> | <uuid>)

Description:
  Command: \`VBoxManage controlvm <vm> pause\`

  Temporarily puts a virtual machine on hold, without changing its state for
  good. The VM window will be painted in gray to indicate that the VM is
  currently paused. (This is equivalent to selecting the "Pause" item in the
  "Machine" menu of the GUI.)
HEREDOC
pause() {
  local id="${1:-}"
  if [[ -z "${id}" ]]
  then
    _die printf "Name or UUID not provided.\\n"
  fi
  VBoxManage controlvm "${id}" pause
}

# ----------------------------------------------------------------------- reset

desc "reset" <<HEREDOC
Usage:
  ${_ME} reset (<name> | <uuid>)

Description:
  Command: \`VBoxManage controlvm <vm> reset\`

  Has the same effect on a virtual machine as pressing the "Reset" button on a
  real computer: a cold reboot of the virtual machine, which will restart and
  boot the guest operating system again immediately. The state of the VM is not
  saved beforehand, and data may be lost. (This is equivalent to selecting the
  "Reset" item in the "Machine" menu of the GUI.)
HEREDOC
reset() {
  local id="${1:-}"
  if [[ -z "${id}" ]]
  then
    _die printf "Name or UUID not provided.\\n"
  fi
  VBoxManage controlvm "${id}" reset
}

# ---------------------------------------------------------------------- resume

desc "resume" <<HEREDOC
Usage:
  ${_ME} resume (<name> | <uuid>)

Description:
  Command: \`VBoxManage controlvm <vm> resume\`

  Undo a previous pause command. (This is equivalent to selecting the "Resume"
  item in the "Machine" menu of the GUI.)
HEREDOC
resume() {
  local id="${1:-}"
  if [[ -z "${id}" ]]
  then
    _die printf "Name or UUID not provided.\\n"
  fi
  VBoxManage controlvm "${id}" resume
}

# ------------------------------------------------------------------------ show

desc "show" <<HEREDOC
Usage:
  ${_ME} show (<name> | <uuid>)

Description:
  Command: \`VBoxManage showvminfo <vm>\`

  Show information about a particular virtual machine.
HEREDOC
show() {
  local id="${1:-}"
  if [[ -z "${id}" ]]
  then
    _die printf "Name or UUID not provided.\\n"
  fi
  VBoxManage showvminfo "${id}"
}

# ----------------------------------------------------------------------- start

desc "start" <<HEREDOC
Usage:
  ${_ME} start (<name> | <uuid>) [--headless]

Description:
  Start the VM with the given name or UUID.
HEREDOC
start() {
  local headless=
  local id=

  for arg in "${_COMMAND_ARGV[@]:-}"
  do
    case "${arg}" in
      --headless) headless=1;;
      *) id="${arg}";;
    esac
  done

  if [[ -z "${id}" ]]
  then
    _die printf "Name or UUID not provided.\\n"
  fi

  if [[ -n "${headless}" ]]
  then
    VBoxManage startvm "${id}" --type headless
  else
    VBoxManage startvm "${id}"
  fi
}

# ---------------------------------------------------------------------- status

desc "status" <<HEREDOC
Usage:
  ${_ME} status [(<name> | <uuid>) [--long|-l]]

Options:
  -l --long  Display long-form status information for the specified VM.

Description:
  When no argument has been passed, this acts as an alias for
  \`${_ME} list status\` and displays the status for all of the VMs. When
  passed a VM name or UUID, the status aka state of that VM is displayed.
HEREDOC
status() {
  local id=
  local status_string=
  local long=0

  for arg in "${_COMMAND_ARGV[@]:1}"
  do
    case "${arg}" in
      -l|--long) long=1;;
      *) [[ -z "${id}" ]] && id="${arg}";;
    esac
  done

  if [[ -n "${id}" ]]
  then
    if ((long))
    then
      status_string="$(
        ${_ME} show "${id}" \
          | awk '/State:/ {for (i=2; i<NF; i++) printf $i " "; print $NF}'
      )"
    else
      # Only display state name. Using two `awk` statements since the state
      # can be displayed with one or more word, which is viewed as multiple
      # fields. Instead get all of the fields and then blank out everything
      # after the first parenthesis.
      status_string="$(
        ${_ME} show "${id}" \
          | awk '/State:/ {for (i=2; i<NF; i++) printf $i " "; print $NF}' \
          | awk '{gsub(/\(.*/,"");print}'
      )"
    fi
    _emojify_status "${status_string}"
  else
    ${_ME} list status
  fi
}

# ------------------------------------------------------------------------ stop

desc "stop" <<HEREDOC
Usage:
  ${_ME} stop (<name> | <uuid>)

Description:
  Command: \`VBoxManage controlvm <vm> savestate\`

  Save the current state of the VM to disk and then stop the VM. (This is
  equivalent to selecting the "Close" item in the "Machine" menu of the GUI or
  pressing the window's close button, and then selecting "Save the machine
  state" in the dialog.)
HEREDOC
stop() {
  local id="${1:-}"
  if [[ -z "${id}" ]]
  then
    _die printf "Name or UUID not provided.\\n"
  fi
  VBoxManage controlvm "${id}" savestate
}

desc "halt" <<HEREDOC
Alias for \`$_ME stop\`.

\`$_ME help stop\`:
---
$(desc --get "stop")
HEREDOC
halt() {
  stop "$@"
}

# ------------------------------------------------------------------------ snapshot

desc "snapshot" <<HEREDOC
Usage:
  ${_ME} snapshot (<name> | <uuid>) <action>

Description:
  Command: \`VBoxManage snapshot <vm> list\`
  Command: \`VBoxManage snapshot <vm> take <snapshot>\`
  Command: \`VBoxManage snapshot <vm> delete <snapshot>\`
  Command: \`VBoxManage snapshot <vm> restore <snapshot>\`

  ilist all the templates a VM has
HEREDOC
snapshot() {
  local id="${1:-}"
  local action="${2:-}"
  local snapshot="${3:-}"
  if [[ -z "${id}" ]]
  then
    _die printf "Name or UUID not provided.\\n"
  fi
  if [[ -z "${action}" ]]
  then
    action='list'
  fi

  case "${action}" in
    list)
      VBoxManage snapshot "${id}" "${action}"
      ;;
    take|delete|restore)
      if [[ -z "${snapshot}" ]]
      then
        _die printf "name of snapshot is required in case of deleting or creating snapshot\\n"            
      fi
      VBoxManage snapshot "${id}" "${action}" "${snapshot}"
      ;;
  esac
}

###############################################################################
# _main
###############################################################################

_main
